/*
Author: Nathan Leach (nathan.leach_at_checkmarx.com)
Date: Sometime in 2019
Desc: A CxQL port of TruffleHog from: https://github.com/dxa4481/truffleHog
Finds secrets in any type of file included in a scan, reports them
as vulnerabilities with flows if applicable.
*/

// Regexes from https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json


Dictionary<string, string> regexes = new Dictionary<string, string>(); 
regexes.Add ("Slack Token","(xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})");
regexes.Add("RSA private key", "-----BEGIN RSA PRIVATE KEY-----");
regexes.Add("SSH (DSA) private key","-----BEGIN DSA PRIVATE KEY-----");
regexes.Add("SSH (EC) private key", "-----BEGIN EC PRIVATE KEY-----");
regexes.Add("PGP private key block","-----BEGIN PGP PRIVATE KEY BLOCK-----");
regexes.Add("Amazon AWS Access Key ID", "AKI.[0-9A-Z]{16}"); // Slight adjustment to widen the match
regexes.Add("Amazon MWS Auth Token", "amzn\\.mws\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}");
regexes.Add("AWS API Key", "AKI.[0-9A-Z]{16}"); // Slight adjustment to widen the match
regexes.Add("Facebook Access Token", "EAACEdEose0cBA[0-9A-Za-z]+");
regexes.Add("Facebook OAuth", "[f|F][a|A][c|C][e|E][b|B][o|O][o|O][k|K].*['|\"][0-9a-f]{32}['|\"]");
regexes.Add("GitHub", "[g|G][i|I][t|T][h|H][u|U][b|B].*['|\"][0-9a-zA-Z]{35,40}['|\"]");
regexes.Add("Generic API Key", "[a|A][p|P][i|I][_]?[k|K][e|E][y|Y].*['|\"][0-9a-zA-Z]{32,45}['|\"]");
regexes.Add("Generic Secret", "[s|S][e|E][c|C][r|R][e|E][t|T].*['|\"][0-9a-zA-Z]{32,45}['|\"]");
regexes.Add("Google API Key", "AIza[0-9A-Za-z\\-_]{35}");
regexes.Add("Google Cloud Platform API Key", "AIza[0-9A-Za-z\\-_]{35}");
regexes.Add("Google Cloud Platform OAuth", "[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com");
regexes.Add("Google Drive API Key", "AIza[0-9A-Za-z\\-_]{35}");
regexes.Add("Google Drive OAuth", "[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com");
regexes.Add("Google (GCP) Service-account", "\"type\": \"service_account\"");
regexes.Add("Google Gmail API Key", "AIza[0-9A-Za-z\\-_]{35}");
regexes.Add("Google Gmail OAuth", "[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com");
regexes.Add("Google OAuth Access Token", "ya29\\.[0-9A-Za-z\\-_]+");
regexes.Add("Google YouTube API Key", "AIza[0-9A-Za-z\\-_]{35}");
regexes.Add("Google YouTube OAuth", "[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com");
regexes.Add("Heroku API Key", "[h|H][e|E][r|R][o|O][k|K][u|U].*[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}");
regexes.Add("MailChimp API Key", "[0-9a-f]{32}-us[0-9]{1,2}");
regexes.Add("Mailgun API Key", "key-[0-9a-zA-Z]{32}");
regexes.Add("Password in URL", "[a-zA-Z]{3,10}://[^/\\s:@]{3,20}:[^/\\s:@]{3,20}@.{1,100}[\"'\\s]");
regexes.Add("Password in URL - fixed", "[a-zA-Z]{3,10}://[^/\\s:@]*?:[^/\\s:@]*?@[^/\\s:@]*");
regexes.Add("PayPal Braintree Access Token", "access_token\\$production\\$[0-9a-z]{16}\\$[0-9a-f]{32}");
regexes.Add("Picatic API Key", "sk_live_[0-9a-z]{32}");
regexes.Add("Slack Webhook", "https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}");
regexes.Add("Stripe API Key", "sk_live_[0-9a-zA-Z]{24}");
regexes.Add("Stripe Restricted API Key", "rk_live_[0-9a-zA-Z]{24}");
regexes.Add("Square Access Token", "sq0atp-[0-9A-Za-z\\-_]{22}");
regexes.Add("Square OAuth Secret", "sq0csp-[0-9A-Za-z\\-_]{43}");
regexes.Add("Twilio API Key", "SK[0-9a-fA-F]{32}");
regexes.Add("Twitter Access Token", "[t|T][w|W][i|I][t|T][t|T][e|E][r|R].*[1-9][0-9]+-[0-9a-zA-Z]{40}");
regexes.Add("Twitter OAuth", "[t|T][w|W][i|I][t|T][t|T][e|E][r|R].*['|\"][0-9a-zA-Z]{35,44}['|\"]");

foreach(String regexKey in regexes.Keys)
{
	
	CxList findAsCodeResult = All.FindByRegex(regexes[regexKey], 
		CxList.CxRegexOptions.SearchInComments,
		System.Text.RegularExpressions.RegexOptions.IgnoreCase |
		System.Text.RegularExpressions.RegexOptions.Singleline);


	CxList findAsCommentResult = All.FindByRegexExt(regexes[regexKey], "*", 
		CxList.CxRegexOptions.SearchInComments,
		System.Text.RegularExpressions.RegexOptions.IgnoreCase |
		System.Text.RegularExpressions.RegexOptions.Singleline);
	
	CxList found = Resolve_Code_And_Comment_Flows(findAsCodeResult, findAsCommentResult);
	
	if (found.Count > 0)
		cxLog.WriteDebugMessage(regexKey + " results: " + found.Count);
		
	result.Add(found);
}

